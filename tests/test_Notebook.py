# Currently only testing for known value of E_q_lat from the FNV scheme for test data
# To-do: 
# - Recalculate verified_E_q_lat once defaults for setting sigma have been decided
# - Add in additional tests once LZ method and alternative pa steps added to notebook
# - Add interstitial and vacancy test data to configurations list

'''
This test is based on the workflow from 'DefectCorrectionsDataset.py'
The NotebookScripter library is used to feed in directories for test data with the recieve_param function
NotebookScripter is then used to extract model energies from the notebook to compare to known outputs for the test data
'''

from NotebookScripter import run_notebook, run_notebook_in_process
import os
import pytest


def test_notebook():
    verified_E_q_lat = 0.20495454545454556 # SKW: This needs to be recalculated 

    # Define directory containing all defects data
    base_dir = "tests/TestData"
    # Info from 'User inputs' cell of notebook that apply to all defects in dataset
    global_configuration = {
        "dielectric_xx": 7.49,
        "dielectric_yy": 6.92,
        "dielectric_zz": 7.19,
        "path_to_all_defects": base_dir,
        "path_to_host": 'tests/TestData/perfect',
        "charge_model_file": 'charge_model.dat',
        "pa_plot_file": 'pa_plot.png',
        "manual_cutoff": None
    }
    # Dictionary storing location of data for each charged defect to be analysed
    # Dictionary key defines: name of directory output data will be stored in for each defect and then
    # location of neutral defect data, charged defect data and defect charge state must be inputted for each defect that is to be processed
    test_data = {
        "antisite_test": [
            # neutral_dir, charge_dir, charge_state
            "antisite", "antisite", 1
        ]
    }
    # Notebook parameters for specific charged defect being processed once sigma defaults in notebook have been decided
    configurations = []
    for name, (neutral_dir, charge_dir, charge_state) in test_data.items():
        # make sure required inputs exists
        path_to_defect = os.path.join(base_dir, charge_dir)
        path_to_neutral = os.path.join(base_dir, neutral_dir)  
        assert os.path.isdir(path_to_defect), 'required input directory is missing {0}'.format(path_to_defect)
        assert os.path.isdir(path_to_neutral), 'required input directory is missing {0}'.format(path_to_neutral)
        config = {
            "defect_outputs_dir": name,
            "path_to_defect": path_to_defect,
            "path_to_neutral": path_to_neutral,
            "defect_charge": charge_state
        }
        configurations.append(config)
    # Use NotebookScripter to run notebook for each charged defect in turn
    for config in configurations:
        try:
          notebook_test = run_notebook_in_process("./DefectCorrectionsNotebook.ipynb", **global_configuration, **config)("E_q_lat")
        except Exception as err:
            print("Caught error when executing notebook: {0}".format(err))
        
        print(notebook_test.E_q_lat)
        # Extract parameters generated by notebook for testing against known values for test data
        test_E_q_lat = notebook_test.E_q_lat

    #assert test_E_q_lat == pytest.approx(verified_E_q_lat) ## SKW: ADD BACK IN AFTER FINALISING DEFAULTS FOR SIGMA PARAM
